[nahtaro]
    email = nahtaro@gmail.com
[user]
    email = nahtaro@gmail.com
    name = Grzegorz Dziedzic
[core]
    autocrlf = true
[alias]
    sshow = "!f() { git stash show stash^{/$*} -p; }; f"
    sapply = "!f() { git stash apply stash^{/$*}; }; f"
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    f = "!git ls-files | grep -i"
    grep = grep -Ii
    la = "!git config -l | grep alias | cut -c 7-"
    sl = stash list
    sa = stash apply
    ss = stash save
    lg = log --graph --oneline --decorate --all
    ca = commit --amend -C HEAD
    am = commit --amend
    c = commit -m
    b = branch
    dh1 = diff HEAD~1
    ds = diff --staged
    who = shortlog -n -s --no-merges
    
    #Undo last commit (files will be in pending changes)
    undo = reset HEAD~

    cfm = !git checkout master && git fetch && git rebase origin/master
    
    aa = !git add -A && git status
    up = !git fetch origin && git rebase origin/master
    ir = !git rebase -i origin/master
    
    s = status
    ch = checkout
    
    aliases = "!git config --get-regexp alias"
    
    # Get the current branch name (not so useful in itself, but used in
    # other aliases)
    branch-name = "!git rev-parse --abbrev-ref HEAD"
    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = "!git push -u origin $(git branch-name)"
    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"
    # Delete a branch and recreate it from master â€” useful if you have, say,
    # a development branch and a master branch and they could conceivably go
    # out of sync
    recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"
    
    lds2 = log -30 --abbrev-commit --relative-date --format='%Cred%h%Cgreen %aN%Cblue %ar %Creset%x09 %s'
    
    fuck = reset HEAD --hard
    fuckthisshit = !git fetch origin && git reset --hard origin/master
    yolo = push -f

    localpurge = "!git branch --merged | grep -Ev '\\*|master|develop' | xargs -n 1 git branch -d"
    overview = log --graph --oneline --first-parent develop
    dsf = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\"  && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"
[merge]
    tool = meld
[mergetool "meld"]
    path = C:\\Program Files (x86)\\Meld\\Meld.exe
[safe]
	directory = %(prefix)/C:/Users/g/projects/dynamicity
	directory = %(prefix)/C:/Users/g/projects/flow_launcher_plugins
	directory = %(prefix)/C:/Users/g/projects/BotArmy
	directory = %(prefix)/C:/Users/g/projects/TheToolBox2
	directory = %(prefix)/C:/Users/g/projects/Nami
	directory = %(prefix)/C:/xg